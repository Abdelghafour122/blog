---
import { Sprite } from "astro-icon";
const iconSize = "24";
---

<nav class="w-full p-2 flex items-center justify-between">
  <ul class="flex items-center justify-between gap-3">
    <li><a href="/">Home</a></li>
    <li><a href="/blog">Blog</a></li>
    <li><a href="/about">About</a></li>
  </ul>
  <div class="right flex items-center justify-between gap-3">
    <a href="" class="flex items-center gap-1">
      <Sprite name="github" size={iconSize} id="github" title="Github" />
       Github
    </a>
    <a href="" class="flex items-center gap-1">
      <Sprite name="x-twitter" size={iconSize} id="twitter" title="Twitter" />
       Twitter</a
    >
    <button class="theme-button">
      <Sprite
        name="moon"
        size={iconSize}
        id="dark-moon"
        class="hidden"
        title="Dark"
      />
      <Sprite
        name="sun"
        size={iconSize}
        id="light-sun"
        class="hidden"
        title="Light"
      />
      <Sprite
        name="system"
        size={iconSize}
        id="default-system"
        class="hidden"
        title="Auto"
      />
    </button>
  </div>
</nav>

<script>
  import { ColorTheme } from "@utils/types";
  const themeButton = document.querySelector(
    ".theme-button",
  ) as HTMLButtonElement;

  const moon = document.getElementById("dark-moon") as HTMLElement;
  const sun = document.getElementById("light-sun") as HTMLElement;
  const system = document.getElementById("default-system") as HTMLElement;

  function getColorTheme(): ColorTheme {
    const colorTheme = localStorage.getItem("ColorTheme");
    if (!colorTheme) return ColorTheme.system;

    return colorTheme as ColorTheme;
  }

  const isDarkPreferred = window.matchMedia(
    "(prefers-color-scheme: dark)",
  ).matches;

  function changeColorThemeIcon(newTheme: ColorTheme) {
    if (newTheme === ColorTheme.light) {
      moon.classList.add("hidden");
      sun.classList.remove("hidden");
      system.classList.add("hidden");
    } else if (newTheme === ColorTheme.dark) {
      moon.classList.remove("hidden");
      sun.classList.add("hidden");
      system.classList.add("hidden");
    } else {
      moon.classList.add("hidden");
      sun.classList.add("hidden");
      system.classList.remove("hidden");
    }
  }

  const currentTheme = getColorTheme();
  changeColorThemeIcon(currentTheme);

  themeButton?.addEventListener("click", () => {
    const currentTheme = getColorTheme();
    if (currentTheme === ColorTheme.dark) {
      localStorage.setItem("ColorTheme", ColorTheme.light);
      document.documentElement.classList.remove("dark");
    } else if (currentTheme === ColorTheme.light) {
      localStorage.setItem("ColorTheme", ColorTheme.system);
      if (isDarkPreferred) {
        document.documentElement.classList.add("dark");
      } else {
        document.documentElement.classList.remove("dark");
      }
    } else {
      localStorage.setItem("ColorTheme", ColorTheme.dark);
      document.documentElement.classList.add("dark");
    }
    changeColorThemeIcon(getColorTheme());
  });
</script>
